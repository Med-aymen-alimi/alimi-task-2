# -*- coding: utf-8 -*-
"""task 2 GRIP .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfpTMRYbh6PvBdluRWZMOffZcyGddsYs

*Task 2*
Prediction using Unsupervised ML
Objectif :prediction of the optimum number of clusters
and represent it visually.

Importing the libraries
"""

#the libraries are :
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

"""
upload the dataset iris.csv
"""

data =pd.read_csv('/content/Iris.csv')
print(data.head()) #to print the first 5 lignes of our data

"""Data Peprocessing"""

#see info about our data
data.info()
# Check for null values
print('nombre of null value is',data.isnull().sum())
# Check for duplicated rows
print('number of duplicated is:',data.duplicated().sum())

"""We have checked our data and found that there are no duplicates or null values

*Data visualisation*
"""

#Data visualisation
sns.set(style="ticks")
sns.pairplot(data)
plt.show()

"""predecting the best value of K"""

# Elbow plot to find optimal number of clusters
#we must eliminate the column of
X = data.iloc[:, :-1]
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

sns.set(style="ticks")
fig, ax = plt.subplots(figsize=(8, 6))
ax.plot(range(1, 11), inertia, marker='o')
ax.set_xlabel('Number of Clusters')
ax.set_ylabel('WCSS')
ax.set_title('Elbow Plot')
plt.show()

"""So we can see the value of k must be 3 cluster"""

#now we are going to work with tke k_means with k =3
# Fit k-means with optimal k
kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(X)

# Predict cluster labels
labels = kmeans.predict(X)

# Visualizing the clusters
plt.scatter(X.iloc[labels == 0, 0], X.iloc[labels == 0, 1], color='orange', label='Iris-versicolor ', s=50)
plt.scatter(X.iloc[labels == 1, 0], X.iloc[labels == 1, 1], color='blue', label='Iris-virginica', s=50)
plt.scatter(X.iloc[labels == 2, 0], X.iloc[labels == 2, 1], color='green', label='Iris-setosa', s=50)

# Plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color='red', label='Centroids', s=300)
plt.legend()
plt.show()